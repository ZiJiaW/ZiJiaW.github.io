<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 一只特立独行的猫</title>
    <link>https://zijiaw.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on 一只特立独行的猫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zijiaw.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法拾遗：XGBoost</title>
      <link>https://zijiaw.github.io/posts/a9-xgboost/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zijiaw.github.io/posts/a9-xgboost/</guid>
      <description>本文介绍XGBoost的基本思想。
一个包含$K$树棵的集成模型中，每棵树的预测结果是一个实数值（回归树），如果我们把每棵树看作是一个函数$f_k$，则对于样本$x_i$的预测结果为这些树的输出之和： $$\hat y_i=\phi(x_i)=\sum_{k=1}^K f_k(x_i)$$ 我们的目标就是求解最优的$K$棵树。
对于树模型来说，假设有$T$个叶子结点，每棵树会把输入$x$映射到某一个叶子结点$q(x)$上，并输出该叶子节点上预设的值$w_{q(x)}$。上面用$q$来表示一棵树形成的独特映射（将输入映射到叶子结点），而$w$表示叶子结点上的值向量，这二者实际上就代表了一棵树。
现在我们考虑这样一个模型的损失函数： $$L(\phi)=\sum_il(\hat y_i,y_i) + \sum_{k=1}^K \Omega(f_k)$$ 其中第一项为所有样本上的误差之和，比如平方误差；后一项为正则项，用于限制每棵树的复杂度，复杂度越大惩罚越大，其定义为： $$\Omega(f_k)=\gamma T+\frac{1}{2} \lambda ||w||^2$$ 可以看到其实际上为叶子节点数量$T$与权重$w$的平方和的加权和。
我们使用迭代的策略来一棵一棵计算上面的树模型，假设在第$t$轮添加的树对应函数为$f_t$，则在前$t-1$棵树已经确定的情况下，损失函数为： $$L(\phi_t)=\sum_i l(\hat y_i^{(t-1)}+f_t(x_i),y_i)+\Omega(f_t)$$ 其中$\hat y_i^{(t-1)}$为前$t-1$棵树的预测结果。我们需要在第$t$轮计算一棵最小化$L(\phi_t)$的树，贪心地加入到模型中。
上面式中，变量为$f_t(x_i)$，我们将函数$l(\hat y_i^{(t-1)}+f_t(x_i),y_i)$在$\hat y_i^{(t-1)}$处展开到二阶泰勒来近似： $$l(\hat y_i^{(t-1)}+f_t(x_i),y_i)\approx l(\hat y_i^{(t-1)},y_i)+g_if_t(x_i)+\frac{1}{2}h_if_t^2(x_i)$$ 其中$g_i$和$h_i$分别是损失函数$l(a, y_i)$在$a=\hat y_i^{(t-1)}$处的一阶和二阶导数。
经过近似，我们去掉式中的常量部分，即$l(\hat y_i^{(t-1)},y_i)$，将需最小化的损失函数修改为： $$L(\phi_t)\approx \sum_{i=1}^n[g_if_t(x_i)+\frac{1}{2}h_if_t^2(x_i)]+\gamma T+\frac{1}{2}\lambda\sum_{j=1}^Tw_j^2$$ 现在我们已经将$f_t$单独拿了出来，现在考虑$\sum_i f_t(x_i)$是什么？
如果$q(x_i)=j$，那么$f_t(x_i)=w_j$，因此假如集合$I_j$是所有被树映射到叶子节点$j$的样本集合，即$I_j={i| q(x_i)=j}$，那么： $$\sum_if_t(x_i)=\sum_{j=1}^T w_j|I_j|$$ 因此损失函数可以变化为： $$L(\phi_t)=\sum_{j=1}^T \big[(\sum_{i\in I_j} g_i)w_j+\frac{1}{2}(\lambda+\sum_{i\in I_j}h_i)w_j^2\big]+\gamma T$$ 上面的式子中，我们可以很快看出每个叶子结点的权值$w_j$的最优取值为： $$w_j^*=-\frac{\sum_{i\in I_j} g_i}{\lambda+\sum_{i\in I_j}h_i}$$ 上式中，$I_j$取决于当前树的结构，而其余部分均为已知的常值，也就是说，如果第$t$棵树的结构确定下来了，那么叶子节点的输出也可以按照上式直接计算出来。
我们将$w$代入损失函数： $$L(\phi_t)=-\frac{1}{2}\sum_{j=1}^T \frac{(\sum_{i\in I_j} g_i)^2}{\lambda+\sum_{i\in I_j}h_i}+\gamma T$$ 上式给出了一个确定结构的回归树加入后整个模型的损失函数，我们需要构造一棵最小化上式的树。
我们考虑迭代方式构造树，从根节点开始尝试对叶子结点增加分支，假如对叶子结点$j$增加分支，对映射到该结点的样本再进行划分，将$I_j$划分为$I_l$和$I_r$，作为新的两个叶子结点，而其余结点没有变化，那么新树的损失函数为： $$L_{new}=\gamma + L +\frac{1}{2}\Big(\frac{(\sum_{i\in I_j} g_i)^2}{\lambda+\sum_{i\in I_j}h_i}-\frac{(\sum_{i\in I_l} g_i)^2}{\lambda+\sum_{i\in I_l}h_i}-\frac{(\sum_{i\in I_r} g_i)^2}{\lambda+\sum_{i\in I_r}h_i}\Big)$$ 显然，我们希望划分后产生的新树的损失函数最小，实际上就是要找到一个最优的划分，使得上式最小化，如果把对应结点的式子看作该结点的score，那么就是需要新结点的score之和最大。如果上式最小化后，$L_{new}&amp;gt;=L$，则显然在结点$j$处不可再划分了。</description>
    </item>
    
    <item>
      <title>算法拾遗：线段树</title>
      <link>https://zijiaw.github.io/posts/a8-segmenttree/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zijiaw.github.io/posts/a8-segmenttree/</guid>
      <description>线段树（Segment Tree）是一种在数组之上维护的树结构（也叫statistic tree），它能够存储一个数组a，支持下面两个操作：
 以$O(lgn)$的时间查询数组上的一个区间a[l:r]内的某种统计值，比如查询区间内的元素之和，或区间内的最小值最大值等。 支持以$O(lgn)$的时间修改数组中的某一元素。  基础思想 本节按照求区间和需求解释如何构建并维护一棵线段树。其描述如下：
 对于数组a[0:n-1]，树的根节点存储整个区间的和，即sum(a[0:n-1])，等价于其维护区间[0:n-1]； 树的任意中间结点，若维护区间[l:r]，则其左子树维护[l:(l+r)/2]，右子树维护区间[(l+r)/2+1:r]； 若l==r，则此为叶子节点，不再分裂。  这些树节点的存储可以借鉴二叉堆的思想，用一个数组t来存各层的树结点：根结点在t[0]，其左孩子位于t[1]，右孩子位于t[2]&amp;hellip;&amp;hellip;以此类推，即t[i]的左孩子为t[2i+1]，右孩子为t[2i+2]。
复杂度分析 树高 显然树的构建可以递归的完成，因为每次分裂均对区间长度做二分处理，因此树的高度在$lgn$这一量级；
数据更新 若需要更新数组a[i]=x，则显而易见的做法是从树根递归向下直到对应a[i]的叶子结点，将受影响的区间和进行修改，而每一层的所有区间是不相交的，仅会有一个区间包含a[i]，因此这一过程时间复杂度$O(lgn)$。
求区间和 求区间a[l:r]的和时，依然是从树根开始递归向下，只是这里可能会出现触发多次递归的情况：
 若当前结点维护的区间[tl:tr]恰好等于[l:r]，则直接返回其和； 若当前区间[tl:tr]被[l:r]的左半区间，或右半区间包含，则递归至对应子树； 若当前区间与左右半区间均有交集，记中间点为m，则依次递归左子树查询区间[l:m]，递归右子树查询区间[m+1,r]，再求和。  我们证明上面的递归过程中访问的结点数量不超过$4lgn$，从而时间复杂度为$O(lgn)$。
实际上，我们只需要证明树的每一层中访问到的结点数量不超过4即可。通过归纳法证明，首先在第一层（树根）显然仅1个结点。其次，对于任意层：
 若访问了2个结点，则下一层最多访问4个结点，因为每个结点最多触发两次递归； 若访问了3或4个结点，则这些结点构成的区间必然是相连的，中间的1个或2个结点必然恰好等于查询的区间，不会触发下一层的递归，仅有最左侧和最右侧的结点可能触发递归，而这也导致下一层不超过4个；  基础实现 对于上面提到的实现，长度$n$的数组，其产生的树高为$\lceil lgn \rceil+1$，因此数组大小至多$4n$。通过递归可以完成所有操作。
class SegmentTree { vector&amp;lt;int&amp;gt; t; int n; int build(int idx, int l, int r, const vector&amp;lt;int&amp;gt;&amp;amp; a) { if (l == r) return t[idx] = a[l]; int mid = (l + r) / 2; return t[idx] = build(2 * idx + 1, l, mid, a) + build(2 * idx + 2, mid + 1, r, a); } void update(int i, int val, int idx, int l, int r) { if (l == r) { t[idx] = val; return; } int mid = (l + r) / 2; if (i &amp;lt;= mid) update(i, val, 2 * idx + 1, l, mid); else update(i, val, 2 * idx + 2, mid + 1, r); t[idx] = t[2 * idx + 1] + t[2 * idx + 2]; } int sum(int l, int r, int idx, int tl, int tr) { if (l == tl &amp;amp;&amp;amp; r == tr) return t[idx]; int mid = (tl + tr) / 2; if (r &amp;lt;= mid) return sum(l, r, 2 * idx + 1, tl, mid); if (l &amp;gt; mid) return sum(l, r, 2 * idx + 2, mid + 1, tr); return sum(l, mid, 2 * idx + 1, tl, mid) + sum(mid + 1, r, 2 * idx + 2, mid + 1, tr); } public: SegmentTree(const vector&amp;lt;int&amp;gt;&amp;amp; a) : t(4 * a.</description>
    </item>
    
    <item>
      <title>KMP与AC自动机</title>
      <link>https://zijiaw.github.io/posts/a6-kmpac/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zijiaw.github.io/posts/a6-kmpac/</guid>
      <description>背景 最近又遇到了AC自动机，顺便复习了一下以前学过的KMP算法，两者其实具有很相似的结构，因此写篇文章总结一下。
KMP算法 问题 KMP算法解决字符串模式匹配问题，给定字符串s和p，计算s中出现p的位置，p即pattern。实际上单就这个问题而言，完全可以采用暴力匹配的方式，假设s的长度为m，p的长度为n，则暴力匹配的时间复杂度为O(mn)，相比之下，KMP算法的时间复杂度为O(m+n)。
s: abxcabcycabccp: cabcc一些定义 先定义一些东西，方便后面阐释KMP算法背后的思想。
定义1：
 前缀 prefix：字符串a是字符串b的前缀，意味着a是b的子串，且出现在开头。 后缀 suffix：字符串a是字符串b的后缀，意味着a是b的子串，且出现为尾部。  &amp;quot;abc&amp;quot; is prefix of &amp;quot;abcdefg&amp;quot;&amp;quot;efg&amp;quot; is suffix of &amp;quot;abcdefg&amp;quot;在本文中，我们只考虑真子串的情况，虽然按照定义，任意字符串自身也是自身的前缀，但这对于KMP来说没有意义。现在，我们可以定义一个有趣的东西：给定字符串s，如果字符串r既是s的前缀，也是s的后缀，它就是s的公共前后缀。
如上图，当我们用模式p匹配字符串s时，如果s中多次出现的p存在重叠的情况，那么重叠部分其实就是p的一个公共前后缀。
然后我们可以发现公共前后缀的两个有趣的性质：
性质：
 如果字符串r1，r2是s的两个不同的公共前后缀，且len(r1)&amp;gt;len(r2)，则r2是r1的公共前后缀。 设s[0:i]的最长公共前后缀为s[0:k]，则s[0:k-1]必然是s[0:i-1]的一个公共前后缀。  这两个性质其实很trivial，读者自己画个图就能理解了，我懒得画图了，通过上面的性质1，我们很容易可以得出下面的结论：
引理1：
 设$r_1,r_2&amp;hellip;$是不同的字符串，$r_{i+1}$是$r_{i}$的最长公共前后缀，且$r_1$是$s$的最长公共前后缀，则$r_1,r_2&amp;hellip;$依次是$s$长度递减的所有的公共前后缀。  next数组 现在我们先不谈KMP算法，先计算一个数组next，它的长度等于字符串p的长度（即pattern的长度），这个数组是这么定义的：
定义2：
 next[k]是p[0:k]的最长公共前后缀的长度，也即p[0:k]的最长公共前后缀为p[0:next[k]-1]。特别地，next[0]=0。注意：这里的p[0:k]是闭区间。  vector&amp;lt;int&amp;gt; make_next(const string&amp;amp; p) { vector&amp;lt;int&amp;gt; next(p.size(), 0); int i = 0, j = 1; while (j &amp;lt; p.size()) { while (p[i] != p[j] &amp;amp;&amp;amp; i &amp;gt; 0) {// 根据引理1，按长度递减的顺序尝试所有可能的p[0:i-1]的公共前后缀  i = next[i - 1]; } if (p[i] == p[j]) {// 找到了匹配的p[i]和p[j]，则p[0:j]的最长公共前后缀为p[0:i]  next[j] = ++i; } else { next[j] = 0;// 否则为0  } j++; } return next; } 上面的代码计算next数组。实际上，循环中维护了如下的不变式：</description>
    </item>
    
    <item>
      <title>Paxos 算法</title>
      <link>https://zijiaw.github.io/posts/a3-paxos/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zijiaw.github.io/posts/a3-paxos/</guid>
      <description>共识问题  分布式系统中的节点通信存在两种模型：共享内存（Shared memory）和消息传递（Messages passing）。基于消息传递通信模型的分布式系统，不可避免的会发生以下错误：进程可能会变慢、被杀死或者重启，消息可能会延迟、丢失、重复，我们不考虑可能出现恶意的消息篡改即拜占庭错误的情况。我们希望分布式系统中的多个进程能够就某些值或状态达成一致，即多个进程像是一个整体一样，了解彼此的一些状态，这就是共识。
Paxos算法解决的问题是：如何在一个可能发生上述异常的分布式系统中就某个值达成一致，保证不论发生以上任何异常，都不会破坏共识。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后就能到达一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“共识算法”以保证每个节点执行的指令一致。
Basic Paxos  Paxos算法有多种变体，但其基本思想均来源于basic paxos，这也是Lamport在论文中最先详细阐述的算法。在basic paxos中，我们对于共识的要求如下：
 安全性（坏事不会发生）  从头到尾只有一个值会被选择 当且仅当一个值被选择后，分布式系统中的服务器才能知道它被选择了   活性（好事最终会发生）  总会有某个被提出的值最终被选择 只要有一个值被选择，最终总会被服务器知道    在这里活性的条件是：只要分布式系统中超过半数的服务器还在工作，且其通信延时正常。
在此我们定义两类进程，这些进程可以运行在同一台机器上，也可以运行在不同的机器上：
 Proposer：接收来自客户端的请求，主动发起提议（propose some value）。 Acceptor：被动响应来自proposer的请求，也起到投票者的作用，每次投票称为accept，当多数acceptor接受了某个值，该值即被选择，同时保存被选择的值。  想要达成共识，一个最简单的想法是只设置一个acceptor，这样共识性显然是满足的，但是一旦该节点crash，整个系统就无法工作。因此采用quorum机制：设置多个acceptor（通常是奇数个），当过半的acceptor接受了一个值，就确定该值被选择。
现在我们考虑如何设计proposer和acceptor的运行机制，使得系统满足一致性。
  Accept First Value
每个acceptor简单地接受其得到的第一个值，这显然是不行的，因为网络具有延迟，可能多个并发的提议会交错到达各个acceptor，导致没有任何一个值被过半acceptor接受，系统不满足活性。
  Accept Every Value
如果接受所有值，也不可行，在这种情况下，随着多个提议到来，很可能会有多个值被选择。
  因此，在多acceptor的情况下，其必须能够接受多个值，但也需要在一些情况下拒绝一些值，例如：如果当前已经有一个值v1被选择了，那么后续所有的acceptor/proposer必须accept/propose相同的值——需要设计一套机制来保证。
首先，由于网络RPC的不稳定性，每个提议需要一个唯一递增的序列号（proposal number），即每个proposer在发送新的proposal时，需要保证其序号大于之前见过的所有序号，且不会与其他proposer重复。一个简单的做法是按照余数来递增选择序号。
如上图所示，当proposer为一个新的值选定序号后，首先向所有acceptor广播Prepare请求，</description>
    </item>
    
  </channel>
</rss>
